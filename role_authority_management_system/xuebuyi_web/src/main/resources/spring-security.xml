<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- 配置不拦截的资源 -->
    <security:http pattern="/pages/login.jsp" security="none"/>
    <security:http pattern="/pages/failer.jsp" security="none"/>
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>
    <!-- 方法级别的权限控制 (方式一: JSR-250; 方式二: secured; 方法三: 基于表达式的权限控制) springSecurity的权限角色都有一个"ROLE_"的前缀 -->
    <!-- 开启JSR-250注解支持(在要控制的方法上使用注解@RolesAllowed("角色名"), 可省略"ROLE_"前缀) -->
<!--    <security:global-method-security jsr250-annotations="enabled"/>-->
    <!-- 开启secured注解支持(在要控制的方法上使用注解@secured("ROLE_角色名"), 不可省略"ROLE_"前缀) -->
<!--    <security:global-method-security secured-annotations="enabled"/>-->
    <!-- 开启基于表达式的权限控制注解(在要控制的方法上使用注解)
            @PreAuthorize: 在方法调用之前,基于(SPEL)表达式的计算结果来限制对方法的访问
            @PostAuthorize: 允许方法调用,但是如果表达式计算结果为false,将抛出一个安全性异常
     -->
    <security:global-method-security pre-post-annotations="enabled"/>

    <!--
    	配置具体的规则
    	auto-config="true"	不用自己编写登录的页面，框架提供默认登录页面
    	use-expressions="false"	是否使用SPEL表达式
    -->
    <security:http auto-config="true" use-expressions="true">
        <!-- 配置具体的拦截的规则 pattern="请求路径的规则" access="访问系统的人，必须有ROLE_USER的角色" -->
        <security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>

        <!-- 定义跳转的具体的页面 -->
        <security:form-login
                login-page="/pages/login.jsp"
                login-processing-url="/login.do"
                default-target-url="/index.jsp"
                authentication-failure-url="/pages/failer.jsp"
                authentication-success-forward-url="/pages/main.jsp"

        />

        <!-- 关闭跨域请求 -->
        <security:csrf disabled="true"/>

        <!-- 退出 -->
        <security:logout invalidate-session="true" logout-url="/logout" logout-success-url="/pages/login.jsp" />

    </security:http>

    <bean id="userService" class="top.xuebuyi.service.impl.UserServiceImpl"/>
    <!-- 切换成数据库中的用户名和密码 -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userService">
            <!-- 配置加密的方式 -->
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- 配置加密类 -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!-- 提供了入门的方式，在内存中存入用户名和密码
    <security:authentication-manager>
    	<security:authentication-provider>
    		<security:user-service>
    			<security:user name="admin" password="{noop}admin" authorities="ROLE_USER"/>
    		</security:user-service>
    	</security:authentication-provider>
    </security:authentication-manager>
    -->

</beans>












